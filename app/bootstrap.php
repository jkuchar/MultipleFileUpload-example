<?php

// Load Nette Framework or autoloader generated by Composer
require __DIR__ . '/../libs/autoload.php';


$configurator = new Nette\Config\Configurator;

// Enable Nette Debugger for error visualisation & logging
//$configurator->setDebugMode(TRUE);
$configurator->enableDebugger(__DIR__ . '/../log');

// Enable RobotLoader - this will load all classes automatically
$configurator->setTempDirectory(__DIR__ . '/../temp');
$configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->addDirectory(__DIR__ . '/../libs')
	->register();

// Create Dependency Injection container from config.neon file
$configurator->addConfig(__DIR__ . '/config/config.neon');
$configurator->addConfig(__DIR__ . '/config/config.local.neon', $configurator::NONE); // none section
$container = $configurator->createContainer();

// TODO: Move to separate file?
// <MultipleFileUploadControl>

	// Step 4.1: Setup MultipleFileUpload
	MultipleFileUpload::register();

	// Optional step: register custom user interfaces
	// Registrator accepts instance of class or class name
	// As defaults is used this:
	// 
	//MultipleFileUpload::getUIRegistrator()
	//	->clear()
	//	->register("MFUUIHTML4SingleUpload")
	//	->register("MFUUIPlupload");
	//

	// If you want to use swfupload instead of uploadify use this setup code
	// Vyki is autor of swfupload extension: http://forum.nette.org/cs/profile.php?id=2221
	//MultipleFileUpload::getUIRegistrator()
	//	->clear()
	//	->register("MFUUIHTML4SingleUpload")
	//	->register("MFUUISwfupload");

	// Or you can you uploadify
	//MultipleFileUpload::getUIRegistrator()
	//	->clear()
	//	->register("MFUUIHTML4SingleUpload")
	//	->register("MFUUIUploadify");




	// Optional step: register driver
	//
	// As default driver is used Sqlite driver
	// @see http://addons.nettephp.com/cs/multiplefileupload#toc-drivery
	//
	// When you want to use other driver use something like this:
	//
	//if(class_exists("Dibi",true)) {
	//
	//	Dibi::connect(array(
	//		"driver"   => "postgre",
	//		"host"     => "127.0.0.1",
	//		"dbname"   => "mfu",
	//		"schema"   => "public",
	//		"user"     => "postgres",
	//		"pass"     => "toor",
	//		"charset"  => "UTF-8"
	//	));
	//
	//	MultipleFileUpload::setQueuesModel(new MFUQueuesDibi());
	//}



	// Custom file validation function:
	//function validateMFUFile(HttpUploadedFile $file) {
	//	return $file->isOk();
	//}
	//MultipleFileUpload::$validateFileCallback = callback("validateMFUFile");

// </MultipleFileUploadControl>




return $container;
